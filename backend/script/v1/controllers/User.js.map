{"version":3,"sources":["../../../api/v1/controllers/User.js"],"names":["db","require","Pool","Helper","User","create","req","res","body","email","password","status","json","emailIsValid","hashPassword","hashUserPassword","createQuery","values","firstname","lastname","gender","jobRole","department","address","rows","query","token","generateToken","id","error","routine","getUsers","queryText","rowCount","err","message","getOneUser","parseInt","params","pool","results","updateUser","deleteUser","signin","comparePassword","module","exports"],"mappings":"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","sourcesContent":["const db = require('../../../database/db');\nconst Pool = require('pg').Pool\n\nconst Helper = require('./Helper');\n\nconst User = {\n  /**\n   * Create A User\n   */\n  async create(req, res) {\n    if (!req.body.email || !req.body.password) {\n      return res.status(400).json({'message': 'Some values are missing'});\n    }\n    if (!Helper.emailIsValid(req.body.email)) {\n      return res.status(400).json({ 'message': 'Invalid Email. Enter a valid one' });\n    }\n    const hashPassword = Helper.hashUserPassword(req.body.password);\n\n    const createQuery = `INSERT INTO\n      users(firstname, lastname, email, password, gender, jobRole, \n        department, address)\n      VALUES($1, $2, $3, $4, $5, $6, $7, $8)\n      returning *`;\n    const values = [\n      req.body.firstname,\n      req.body.lastname,\n      req.body.email,\n      hashPassword,\n      req.body.gender,\n      req.body.jobRole,\n      req.body.department,\n      req.body.address\n    ];\n\n    try {\n      const { rows } = await db.query(createQuery, values);\n      const token = Helper.generateToken(rows[0].id);\n      return res.status(201).json({ token });\n    } catch(error) {\n      if (error.routine === '_bt_check_unique') {\n        return res.status(400).json({ 'message': 'This EMAIL has already been taken' })\n      }\n      return res.status(400).json({error});\n    }\n  },\n\n  //get users\n  async getUsers(req, res) {\n    const queryText = 'SELECT * FROM users ORDER BY id ASC';\n    try {\n      const { rows, rowCount } = await db.query(queryText);\n      return res.status(200).json({rows, rowCount});\n    } catch(err) {\n      return res.status(400).json({message: `Couldn't fetch users`});\n    }\n  },\n  getOneUser(req, res) {\n        const id = parseInt(req.params.id);\n        pool.query('SELECT * FROM users WHERE id=$1', [id], \n        (error, results) => {\n            if(error){\n                return res.status(400).json({error:error})\n            }\n            return res.status(200).json(results.rows)\n        });\n    },\n  getOneUser(req, res) {\n    const id = parseInt(req.params.id);\n    pool.query('SELECT * FROM users WHERE id=$1', [id], \n    (error, results) => {\n      if(error){\n          return res.status(400).json({error:error})\n      }\n      return res.status(200).json(results.rows)\n    });\n  },\n  updateUser(req, res) {\n    const id = parseInt(req.params.id);\n    const { firstname, lastname, email, gender, jobRole, department,\n     address} = req.body;\n\n     pool.query(`UPDATE users SET firstname=$1, lastname=$2,\n     email=$3, gender=$4, jobRole=$5, department=$6, address=$7 \n     WHERE id=$8`, [firstname, lastname, email, gender, jobRole,\n    department, address], (error, results) => {\n        if(error) {\n            return res.status(400).json({error:error})\n        }\n        return res.status(201).json({message: 'User updated successfully'})\n    });\n  },\n  deleteUser(req, res) {\n    const id = parseInt(req.params.id);\n    pool.query(`DELETE FROM users WHERE id=$1`, [id],\n    (error, results) => {\n        if(error) {\n            return res.status(400).json({error:error})\n        }\n        return res.status(200).json({message: 'User deleted successfully'})\n    });\n  },\n\n  /**\n   * Login\n   */\n\n   async signin(req, res) {\n     if(!req.body.email || !req.body.password) {\n       return res.status(400).json({message: 'Email or Password field is blank'})\n     }\n     if(!Helper.emailIsValid(req.body.email)) {\n       return res.status(400).json({message: 'Invalid email. Please enter a valid one'});\n     }\n     const queryText = 'SELECT * FROM users WHERE email=$1';\n     try {\n      const { rows } = await db.query(queryText, [req.body.email]);\n      if(!rows[0]) {\n        return res.status(400).json({message: 'Invalid Email/Password Combination'});\n      }\n      if(!Helper.comparePassword(rows[0].password, req.body.password)) {\n        return res.status(400).json({message: 'Incorrect password'});\n      }\n      const token = Helper.generateToken(rows[0].id);\n      return res.status(200).json({token});\n     } catch(err) {\n        return res.status(400).json({err});\n     }\n   }\n}\n\nmodule.exports = User;"],"file":"User.js"}