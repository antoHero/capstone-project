{"version":3,"sources":["../../../api/v1/controllers/Article.js"],"names":["db","require","Pool","Helper","Article","createArticle","req","res","body","title","article","status","json","message","id","parseInt","params","createQuery","values","moment","Date","user","rows","query","token","generateToken","err","getArticles","queryText","rowCount","getOneArticle","readQuery","updateArticle","findOneArticle","updateQuery","result","error","deleteArticle","deleteQuery","commentOnArticle","getOne","commentQuery","database","uuidv4","comment","response","module","exports"],"mappings":"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","sourcesContent":["const db = require('../../../database/db');\nconst Pool = require('pg').Pool\n\nconst Helper = require('./Helper');\n\nconst Article = {\n    createArticle(req, res) {\n        if(!req.body.title || !req.body.article) {\n            return res.status(400).json({message: 'Some fields are missing'});\n        }\n        const id = parseInt(req.params.id);\n        const createQuery = `INSERT INTO articles(title, article, \n            datePosted, user_id) VALUES($1, $2, $3, $4)\n            returning *`;\n            const values = [\n                req.body.title,\n                req.body.article,\n                moment(new Date()),\n                req.user.id\n            ];\n\n            try {\n                const { rows } = Pool.query(createQuery, values);\n                const token = Helper.generateToken(rows[0].id);\n                return res.status(201).json({ token });\n            } catch(err) {\n                return res.status(400).json({message: 'Error while creating your article'});\n            }\n\n    },\n\n    async getArticles(req, res) {\n        const queryText = 'SELECT * FROM articles ORDER BY id ASC';\n        try {\n            const { rows, rowCount } = await db.query(queryText);\n            return res.status(200).json({rows, rowCount});\n        } catch(err) {\n            return res.status(400).json({message: `Couldn't fetch articles`});\n        }\n    },\n\n    async getOneArticle(req, res) {\n        const readQuery = 'SELECT * FROM articles WHERE id=$1 AND user_id=$2';\n        try {\n            const { rows } = await db.query(readQuery, [req.params.id, req.user.id]);\n            if(!rows[0]) {\n                return res.status(404).json({message:'Oops Article does not exist!'});\n            }\n            return res.status(200).json(rows[0]);\n        } catch(err) {\n            return res.status(400).json({err});\n        }\n    },\n\n    async updateArticle(req, res) {\n        const findOneArticle = 'SELECT * FROM articles WHERE id=$1 AND user_id=$2';\n        const updateQuery = `UPDATE articles SET title=$1, article=$2,\n        datePosted=$3 WHERE id=$4 AND user_id=$5 returning *`;\n        try{ \n            const { rows } = await db.query(findOneArticle, [req.body.params, req.user.id]);\n            if(!rows[0]) {\n                return res.status(404).json({message: 'Oops Article does not exist!'});\n            }\n            const values = [\n                req.body.title || rows[0].title,\n                req.body.article || rows[0].article,\n                moment(new Date()),\n                req.params.id,\n                req.user.id\n            ];\n            const result = await db.query(updateQuery, values);\n            return res.status(201).json(result.rows[0]);\n        } catch(err) {\n            return res.status(400).json({error});\n        }\n    },\n\n    async deleteArticle(req, res) {\n        const deleteQuery = 'DELETE * FROM articles WHERE id=$1 AND user_id=$2 returning *';\n        try {\n            const { rows } = await db.query(deleteQuery, [req.params.id, req.user.id]);\n            if(!rows[0]){\n                return res.status(404).json({message: 'Oops Article does not exist!'});\n            }\n            return res.status(200).json({message: 'Article deleted successfully'});\n        } catch(err) {\n            return res.status(400).json({err});\n        }\n    },\n\n    async commentOnArticle(req, res) {\n        const getOne = 'SELECT * FROM articles WHERE id=$1 AND user_id=$2';\n        const commentQuery = `INSERT INTO articleComments(comment,article_id,user_id,datePosted)\n        VALUES($1,$2,$3,$4,$5) returning *`;\n        try {\n            const { rows } = await database.query(getOne, [req.params.id, req.user.id]);\n            if(!rows[0]) {\n                return res.status(404).json({\n                    message: 'Oops Article does not exist!'\n                });\n            }\n            const values = [\n                uuidv4(),\n                req.body.comment,\n                moment(new Date()),\n                req.article.id,\n                req.user.id,\n                moment(new Date())\n            ];\n\n            const response = await database.query(commentQuery, values);\n            return res.status(201).json({\n                message: 'Successfully added comment'\n            });\n        } catch(error) {\n            return res.status(400).json({error});\n        }\n\n    }\n    \n}\n\nmodule.exports = Article;"],"file":"Article.js"}