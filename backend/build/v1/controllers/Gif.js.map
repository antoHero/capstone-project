{"version":3,"sources":["../../../api/v1/controllers/Gif.js"],"names":["db","require","Pool","Helper","cloud","Gif","createGif","req","res","url","protocol","get","gifUrl","file","filename","body","title","status","json","message","id","parseInt","params","createQuery","values","user","rows","query","token","generateToken","v2","uploader","upload","public_id","error","result","console","log","err","getAllGifs","queryText","rowCount","send","getOneGif","readQuery","updateGif","fineOneGif","updateQuery","article","moment","Date","deleteGif","deleteQuery","commentOnGif","getOne","commentQuery","database","uuidv4","comment","gif","response","module","exports"],"mappings":"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","sourcesContent":["const db = require('../../../database/db');\nconst Pool = require('pg').Pool\n\nconst Helper = require('./Helper');\nconst cloud = require('../middleware/cloudinary');\n\nconst Gif = {\n    createGif(req, res) {\n        const url = req.protocol + '://' + req.get('host');\n        const gifUrl = url + '../images/' + req.file.filename\n        if(!req.body.title || !req.body.gifUrl) {\n            return res.status(400).json({message: 'Some fields are missing'});\n        }\n        const id = parseInt(req.params.id);\n        const createQuery = `INSERT INTO gifs(title, gifUrl, user_id) \n        VALUES($1, $2, $3)\n            returning *`;\n            const values = [\n                req.body.title,\n                gifUrl,\n                req.user.id\n            ];\n\n            try {\n                const { rows } = Pool.query(createQuery, values);\n                const token = Helper.generateToken(rows[0].id);\n                cloud.v2.uploader.upload(url, { public_id: 'gifUrl'},\n                function(error, result) {\n                    console.log(result);\n                });\n                return res.status(201).json({ token });\n            } catch(err) {\n                return res.status(400).json({message: 'Error while creating your gif'});\n            }\n\n    },\n\n    async getAllGifs(req, res) {\n        const queryText = 'SELECT * FROM gifs ORDER BY id ASC';\n        try {\n            const { rows, rowCount } = await db.query(queryText);\n            return res.status(200).json({rows, rowCount});\n        } catch(err) {\n            return res.status(400).send({message: `Couldn't fetch gifs`});\n        }\n    },\n\n    async getOneGif(req, res) {\n        const readQuery = 'SELECT * FROM gifs WHERE id=$1 AND user_id=$2';\n        try {\n            const { rows } = await db.query(readQuery, [req.params.id, req.user.id]);\n            if(!rows[0]) {\n                return res.status(404).json({message:'Oops Gif does not exist!'});\n            }\n            return res.status(200).json(rows[0]);\n        } catch(err) {\n            return res.status(400).json({err});\n        }\n    },\n\n    async updateGif(req, res) {\n        const fineOneGif = 'SELECT * FROM gifd WHERE id=$1 AND user_id=$2';\n        const updateQuery = `UPDATE gifs SET title=$1, comment=$2,\n        gif_id=$3, user_id=$4 WHERE id=$5 AND user_id=$5 returning *`;\n        try{ \n            const { rows } = await db.query(fineOneGif, [req.body.params, req.user.id]);\n            if(!rows[0]) {\n                return res.status(404).json({message: 'Oops Gif does not exist!'});\n            }\n            const values = [\n                req.body.title || rows[0].title,\n                req.body.article || rows[0].article,\n                moment(new Date()),\n                req.params.id,\n                req.user.id\n            ];\n            const result = await db.query(updateQuery, values);\n            return res.status(201).json(result.rows[0]);\n        } catch(err) {\n            return res.status(400).json({error});\n        }\n    },\n\n    async deleteGif(req, res) {\n        const deleteQuery = 'DELETE * FROM gifs WHERE id=$1 AND user_id=$2 returning *';\n        try {\n            const { rows } = await db.query(deleteQuery, [req.params.id, req.user.id]);\n            if(!rows[0]){\n                return res.status(404).json({message: 'Oops Gif does not exist!'});\n            }\n            return res.status(200).json({message: 'Gif deleted successfully'});\n        } catch(err) {\n            return res.status(400).json({err});\n        }\n    },\n\n    async commentOnGif(req, res) {\n        const getOne = 'SELECT * FROM gifs WHERE id=$1 AND user_id=$2';\n        const commentQuery = `INSERT INTO gifComments(comment,gif_id,user_id)\n        VALUES($1,$2,$3,$4,$5) returning *`;\n        try {\n            const { rows } = await database.query(getOne, [req.params.id, req.user.id]);\n            if(!rows[0]) {\n                return res.status(404).json({\n                    message: 'Oops Gif does not exist!'\n                });\n            }\n            const values = [\n                uuidv4(),\n                req.body.comment,\n                moment(new Date()),\n                req.gif.id,\n                req.user.id,\n                moment(new Date())\n            ];\n\n            const response = await database.query(commentQuery, values);\n            return res.status(201).json({\n                message: 'Successfully added comment'\n            });\n        } catch(error) {\n            return res.status(400).send(error);\n        }\n\n    }\n    \n}\n\nmodule.exports = Gif;"],"file":"Gif.js"}